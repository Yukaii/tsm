#!/bin/bash

# Function to get unique session names
get_unique_sessions() {
    tmux list-sessions -F '#{session_name}' | sed 's/^floating_//; s/_[0-9]*$//' | sort -u
}

# Function to get all sessions for a given base name
get_sessions_for_base() {
    base_name="$1"
    tmux list-sessions -F '#{session_name}' | grep -E "^(floating_${base_name}_[0-9]*)|(${base_name})$"
}

# Function to list sessions
list_sessions() {
    get_unique_sessions
}

# Function to kill sessions
kill_session() {
    base_name="$1"
    sessions_to_remove=$(get_sessions_for_base "${base_name}")
    echo $sessions_to_remove
    printf "%s\n" "${sessions_to_remove}" | while IFS= read -r session; do
      tmux kill-session -t "${session}" && printf "Removed session: %s\n" "${session}" >&2
    done
}

# Function to create or attach to a floating popup session
popup() {
    window_id=$(tmux display-message -p '#I')
    current_session_name=$(tmux display-message -p '#S')
    parent_session_dir=$(tmux display-message -p -F "#{pane_current_path}" -t0)
    session_name="floating_${current_session_name}_${window_id}"
    startup_command="$1"

    if tmux has-session -t "$session_name" 2>/dev/null; then
        if [ -n "$startup_command" ]; then
            target_pane=$(tmux list-panes -a -F "#{session_name} #{pane_id} #{window_name}" | grep -i "^$session_name" | grep -i "$(echo $startup_command | cut -d' ' -f1)" | awk '{print $2}')
            switch_command=""
            if [ -z "$target_pane" ]; then
                window_name=$(echo $startup_command | cut -d' ' -f1)
                tmux new-window -t "$session_name" -n "$window_name" -c "$parent_session_dir" "$startup_command"
            else
                switch_command="tmux select-window -t $(tmux display-message -p -F "#{window_index}" -t"$target_pane") ;"
            fi
        fi
        tmux popup -w 90% -h 80% -E "bash -c \"tmux attach -t $session_name; $switch_command\""
    else
        if [ -z "$startup_command" ]; then
            tmux new-session -d -s "$session_name" -c "$parent_session_dir"
        else
            window_name=$(echo $startup_command | cut -d' ' -f1)
            tmux new-session -d -s "$session_name" -c "$parent_session_dir" "$startup_command"
            tmux rename-window -t "$session_name":1 "$window_name"
        fi
        tmux popup -w 90% -h 80% -E "bash -c \"tmux attach -t $session_name\""
    fi
}

display_help() {
    local command="$1"
    case "$command" in
        "")
            cat << EOF
Usage: tsm <command> [options]

Tmux Session Manager (tsm) - Manage tmux sessions efficiently

Commands:
  list                List all unique session names
  kill <session>      Kill all sessions with the given base name
  popup [command]     Create or attach to a floating popup session
  help [command]      Display help information for tsm or a specific command

Use "tsm help <command>" for more information about a specific command.
EOF
            ;;
        "list")
            cat << EOF
Usage: tsm list

List all unique tmux session names.

This command displays a list of all unique session names, removing any
"floating_" prefixes and numeric suffixes for easier readability.

Example:
  $ tsm list
EOF
            ;;
        "kill")
            cat << EOF
Usage: tsm kill <session_name>

Kill all tmux sessions with the given base name.

This command will terminate all sessions that match the provided name,
including both regular and floating sessions.

Arguments:
  <session_name>    The base name of the session(s) to kill

Example:
  $ tsm kill mysession
EOF
            ;;
        "popup")
            cat << EOF
Usage: tsm popup [command]

Create or attach to a floating popup tmux session.

If no command is provided, a new shell will be opened in the floating session.
If the floating session already exists, the script will attach to it.
If a command is provided and the process is already running in the session,
the script will switch to the corresponding window.

Arguments:
  [command]    Optional command to run in the new session

Examples:
  $ tsm popup
  $ tsm popup "vim myfile.txt"
EOF
            ;;
        *)
            echo "Error: Unknown command '$command'. Use 'tsm help' for general usage information."
            exit 1
            ;;
    esac
}

# Main script
main() {
    case "$1" in
        list)
            if [ "$2" = "--help" ] || [ "$2" = "-h" ]; then
                display_help "list"
            else
                list_sessions
            fi
            ;;
        kill)
            if [ "$2" = "--help" ] || [ "$2" = "-h" ]; then
                display_help "kill"
            elif [ -z "$2" ]; then
                echo "Error: No session name provided for kill command. Use 'tsm help kill' for usage information." >&2
                exit 1
            else
                kill_session "$2"
            fi
            ;;
        popup)
            if [ "$2" = "--help" ] || [ "$2" = "-h" ]; then
                display_help "popup"
            else
                shift
                popup "$@"
            fi
            ;;
        help)
            display_help "$2"
            ;;
        --help|-h)
            display_help
            ;;
        "")
            display_help
            ;;
        *)
            echo "Error: Unknown command '$1'. Use 'tsm help' for usage information." >&2
            exit 1
            ;;
    esac
}

# Run the main function with all arguments
main "$@"
